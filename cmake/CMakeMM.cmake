if(${CMAKE_VERSION} VERSION_GREATER "3.9.6")
  include_guard(GLOBAL)
endif()

# Store colors
function(cmmm_colors)
  if(DEFINED ENV{CLICOLOR_FORCE} AND NOT "$ENV{CLICOLOR_FORCE}" STREQUAL "0")
    set(CMMM_NO_COLOR FALSE)
  elseif(DEFINED ENV{CLICOLOR} AND "$ENV{CLICOLOR}" STREQUAL "0")
    set(CMMM_NO_COLOR TRUE)
  elseif(DEFINED ENV{CI} AND NOT CMMM_NO_COLOR)
    set(CMMM_NO_COLOR FALSE)
  elseif(WIN32 OR DEFINED ENV{DevEnvDir} OR DEFINED ENV{workspaceRoot} OR CMMM_NO_COLOR)
    set(CMMM_NO_COLOR TRUE)
  endif()
  string(ASCII 27 Esc)
  set_property(GLOBAL PROPERTY CMMM_NO_COLOR "${CMMM_NO_COLOR}")
  set_property(GLOBAL PROPERTY CMMM_DEFAULT_COLOR "${Esc}${CMMM_DEFAULT_COLOR}")
  set_property(GLOBAL PROPERTY CMMM_FATAL_ERROR_COLOR "${Esc}${CMMM_FATAL_ERROR_COLOR}")
  set_property(GLOBAL PROPERTY CMMM_ERROR_COLOR "${Esc}${CMMM_ERROR_COLOR}")
  set_property(GLOBAL PROPERTY CMMM_WARN_COLOR "${Esc}${CMMM_WARN_COLOR}")
  set_property(GLOBAL PROPERTY CMMM_INFO_COLOR "${Esc}${CMMM_INFO_COLOR}")
  set_property(GLOBAL PROPERTY CMMM_RESET_COLOR "${Esc}[0m")
endfunction()

# Do the update check
function(cmmm_changes CHANGELOG_VERSION)
  if(${CMMM_VERSION} VERSION_LESS ${CHANGELOG_VERSION})
    message(STATUS "[ CMMM ] Changes in v${CHANGELOG_VERSION} :")
    foreach(CMMM_CHANGE IN LISTS ARGN)
      message(STATUS "[ CMMM ]  ${CMMM_CHANGE}")
    endforeach()
  endif()
endfunction()

# Print the changelog
function(cmmm_print_changelog)
  message(STATUS "${Esc}${CMMM_INFO_COLOR}[ CMMM ] Using CMakeMM v${CMMM_VERSION}. The latest is v${CMMM_LATEST_VERSION}.${Esc}${CMMM_RESET_COLOR}")
  message(STATUS "${Esc}${CMMM_INFO_COLOR}[ CMMM ] Changes since v${CMMM_VERSION} include the following :${Esc}${CMMM_RESET_COLOR}")
  cmmm_changelog()
  message(STATUS "${Esc}${CMMM_INFO_COLOR}[ CMMM ] To update, simply change the value of VERSION in cmmm function.${Esc}${CMMM_RESET_COLOR}")
  message(STATUS "${Esc}${CMMM_INFO_COLOR}[ CMMM ] You can disable these messages by setting NO_CHANGELOG in cmmm function.${Esc}${CMMM_RESET_COLOR}")
endfunction()

# Check updates
function(cmmm_check_updates)
  cmake_parse_arguments(CMMM "NO_CHANGELOG" "DESTINATION;VERSION" "" "${ARGN}")

  if(NOT ${CMMM_NO_CHANGELOG} AND NOT ${CMMM_VERSION} STREQUAL "latest")
    set(CMMM_CHANGELOG_FILE "${CMMM_DESTINATION}/Changelog.cmake")

    if(EXISTS "${CMMM_CHANGELOG_FILE}")
      file(SHA256 "${CMMM_CHANGELOG_FILE}" CMakeMMSHA256)
    endif()

    set(CMMM_RETRIES_DONE "0")
    while(NOT CMAKEMM_INITIALIZED_${CMMM_TAG} OR NOT EXISTS "${CMMM_CHANGELOG_FILE}" OR "${CMakeMMSHA256}" STREQUAL "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")

      if(${CMMM_RETRIES_DONE} STREQUAL "0")
        message(STATUS "${Esc}${CMMM_DEFAULT_COLOR}[ CMMM ] Downloading Changelog.cmake to ${CMMM_CHANGELOG_FILE}.${Esc}${CMMM_RESET_COLOR}")
      else()
        message(STATUS "${Esc}${CMMM_WARN_COLOR}[ CMMM ] Retrying (${CMMM_RETRIES_DONE}/${CMMM_RETRIES}).${Esc}${CMMM_RESET_COLOR}")
      endif()

      file(
        DOWNLOAD "https://cmake-tools.github.io/cmmm/_static/latest/Changelog.cmake" "${CMMM_CHANGELOG_FILE}"
        ${CMMM_INACTIVITY_TIMEOUT_COMMAND} ${CMMM_TIMEOUT_COMMAND} ${CMMM_TLS_VERIFY_COMMAND} ${CMMM_TLS_CAINFO_COMMAND} LOG CMMM_LOG STATUS CMAKECM_STATUS ${CMMM_SHOW_PROGRESS_COMMAND}
      )
      list(GET CMAKECM_STATUS 0 CMAKECM_CODE)
      list(GET CMAKECM_STATUS 1 CMAKECM_MESSAGE)
      if(${CMAKECM_CODE})
        message(STATUS "${Esc}${CMMM_ERROR_COLOR}[ CMMM ] Error downloading Changelog.cmake : ${CMAKECM_MESSAGE} (${CMAKECM_CODE}).${Esc}${CMMM_RESET_COLOR}")
      else()
        file(SHA256 "${CMMM_CHANGELOG_FILE}" CMakeMMSHA256)
        if(${CMakeMMSHA256} STREQUAL "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855")
          file(REMOVE "${CMMM_CHANGELOG_FILE}")
          message(STATUS "${Esc}${CMMM_ERROR_COLOR}[ CMMM ] Error downloading Changelog.cmake : Empty file.${Esc}${CMMM_RESET_COLOR}")
        else()
          break()
        endif()
      endif()
      if("${CMMM_RETRIES_DONE}" STREQUAL "${CMMM_RETRIES}")
        message(STATUS "${Esc}${CMMM_RESET_COLOR}[ CMMM ] Error downloading Changelog.cmake. Skipping !${Esc}${CMMM_RESET_COLOR}")
        break()
      endif()
      math(EXPR CMMM_RETRIES_DONE "${CMMM_RETRIES_DONE}+1")
    endwhile()
    if(EXISTS "${CMMM_CHANGELOG_FILE}")
      include("${CMMM_CHANGELOG_FILE}")
      cmmm_print_changelog()
    endif()
  endif()
endfunction()

# The cmmm_entry
function(cmmm_entry)
  cmake_parse_arguments(CMMM "NO_CHANGELOG" "VERSION;TAG;DESTINATION" "" "${ARGN}")
  cmmm_check_updates("${ARGN}")
  cmmm_colors()
  set_property(GLOBAL PROPERTY CMMM_SHOW_PROGRESS "${CMMM_SHOW_PROGRESS}")
  set_property(GLOBAL PROPERTY CMMM_DESTINATION "${CMMM_DESTINATION}")
  set_property(GLOBAL PROPERTY CMMM_INACTIVITY_TIMEOUT "${CMMM_INACTIVITY_TIMEOUT}")
  set_property(GLOBAL PROPERTY CMMM_TIMEOUT "${CMMM_TIMEOUT}")
  set_property(GLOBAL PROPERTY CMMM_TLS_VERIFY "${CMMM_TLS_VERIFY}")
  set_property(GLOBAL PROPERTY CMMM_TLS_CAINFO "${CMMM_TLS_CAINFO}")
  set_property(GLOBAL PROPERTY CMMM_RETRIES "${CMMM_RETRIES}")
  set(CMAKEMM_INITIALIZED_${CMMM_TAG} TRUE CACHE INTERNAL "CMakeMM ${CMMM_TAG} is initialized.")
endfunction()

# Parse the argument in case a single one was provided and convert it to a list of arguments which can then be parsed idiomatically.
# For example gh:foo/bar#tag will be converted to: GITHUB_REPOSITORY;foo/bar;GIT_TAG;tag
function(cmmm_parse_single_arg arg outArgs)
  # Look for a scheme
  if("${arg}" MATCHES "^([a-zA-Z]+):(.+)$")
    string(TOLOWER "${CMAKE_MATCH_1}" scheme)
    set(uri "${CMAKE_MATCH_2}")

    # Check for CPM-specific schemes
    if(scheme STREQUAL "gh")
      set(out "GITHUB_REPOSITORY;${uri}")
      set(packageType "git")
    elseif(scheme STREQUAL "gl")
      set(out "GITLAB_REPOSITORY;${uri}")
      set(packageType "git")
    elseif(scheme STREQUAL "bb")
      set(out "BITBUCKET_REPOSITORY;${uri}")
      set(packageType "git")
    else()
      # Fall back to a URL
      set(out "URL;${arg}")
      set(packageType "archive")
    endif()
  else()
    message(STATUS "${CMMM_FATAL_ERROR_COLOR}[ CMMM ] Can't determine type of '${arg}'.${CMMM_RESET_COLOR}")
    message(FATAL_ERROR "Can't determine type of '${arg}'.")
  endif()

  # Parse the rest according to package type
  if(packageType STREQUAL "git")
    # For git repos we interpret #... as a tag or branch or commit hash
    string(REGEX REPLACE "#([^#]+)$" ";GIT_TAG;\\1" out "${out}")
  endif()

  set(${outArgs} ${out} PARENT_SCOPE)
endfunction()

# Download the modules list
function(cmmm_modules_list)
  cmake_parse_arguments(CMMM "NO_COLOR;SHOW_PROGRESS;ALWAYS_DOWNLOAD" "URI;FILEPATH;DESTINATION;RETRIES;INACTIVITY_TIMEOUT;TIMEOUT;USERPWD;NETRC;NETRC_FILE;TLS_VERIFY;TLS_CAINFO;EXPECTED_HASH" "HTTPHEADER" "${ARGN}")
  if(NOT DEFINED CMMM_NO_COLOR)
    get_property(CMMM_NO_COLOR GLOBAL PROPERTY CMMM_NO_COLOR)
  endif()
  if(NOT CMMM_NO_COLOR)
    get_property(CMMM_DEFAULT_COLOR GLOBAL PROPERTY CMMM_DEFAULT_COLOR)
    get_property(CMMM_FATAL_ERROR_COLOR GLOBAL PROPERTY CMMM_FATAL_ERROR_COLOR)
    get_property(CMMM_ERROR_COLOR GLOBAL PROPERTY CMMM_ERROR_COLOR)
    get_property(CMMM_WARN_COLOR GLOBAL PROPERTY CMMM_WARN_COLOR)
    get_property(CMMM_INFO_COLOR GLOBAL PROPERTY CMMM_INFO_COLOR)
    get_property(CMMM_RESET_COLOR GLOBAL PROPERTY CMMM_RESET_COLOR)
  endif()
  if(NOT DEFINED CMMM_SHOW_PROGRESS)
    get_property(CMMM_SHOW_PROGRESS GLOBAL PROPERTY CMMM_SHOW_PROGRESS)
  endif()
  if(NOT DEFINED CMMM_DESTINATION)
    get_property(CMMM_DESTINATION GLOBAL PROPERTY CMMM_DESTINATION)
  endif()
  if(NOT DEFINED CMMM_INACTIVITY_TIMEOUT)
    get_property(CMMM_INACTIVITY_TIMEOUT GLOBAL PROPERTY CMMM_INACTIVITY_TIMEOUT)
  endif()
  if(NOT DEFINED CMMM_TIMEOUT)
    get_property(CMMM_TIMEOUT GLOBAL PROPERTY CMMM_TIMEOUT)
  endif()
  if(NOT DEFINED CMMM_TLS_VERIFY)
    get_property(CMMM_TLS_VERIFY GLOBAL PROPERTY CMMM_TLS_VERIFY)
  endif()
  if(NOT DEFINED CMMM_TLS_CAINFO)
    get_property(CMMM_TLS_CAINFO GLOBAL PROPERTY CMMM_TLS_CAINFO)
  endif()
  if(NOT DEFINED CMMM_RETRIES)
    get_property(CMMM_RETRIES GLOBAL PROPERTY CMMM_RETRIES)
  endif()
  if(NOT DEFINED CMMM_URI)
    message(STATUS "${CMMM_FATAL_ERROR_COLOR}[ CMMM ] URI must be present.${CMMM_RESET_COLOR}")
    message(FATAL_ERROR "URI must be present.")
  endif()

  cmmm_parse_single_arg(${CMMM_URI} CMMM_URI)
  cmake_parse_arguments(CMMM "" "URL;GITHUB_REPOSITORY;GITLAB_REPOSITORY;BITBUCKET_REPOSITORY;GIT_TAG" "" "${CMMM_URI}")

  if(DEFINED CMMM_URL AND DEFINED CMMM_FILEPATH)
    message(STATUS "${CMMM_FATAL_ERROR_COLOR}[ CMMM ] FILEPATH is incompatible with an URL.${CMMM_RESET_COLOR}")
    message(FATAL_ERROR "FILEPATH is incompatible with an URL.")
  endif()

  if(NOT DEFINED CMMM_GIT_TAG)
    set(CMMM_GIT_TAG "main")
  endif()
  if(NOT DEFINED CMMM_FILEPATH)
    set(CMMM_FILEPATH "ModulesList.cmake")
  else()
    string(FIND ${CMMM_FILEPATH} "/" CMMM_FOUND)
    if("${CMMM_FOUND}" STREQUAL "0")
      string(SUBSTRING ${CMMM_FILEPATH} "1" "-1" CMMM_FILEPATH)
    endif()
  endif()
  if(DEFINED CMMM_GITHUB_REPOSITORY)
    set(CMMM_URL "https://raw.githubusercontent.com/${CMMM_GITHUB_REPOSITORY}/${CMMM_GIT_TAG}/${CMMM_FILEPATH}")
  elseif(DEFINED CMMM_GITLAB_REPOSITORY)
    set(CMMM_URL "https://gitlab.com/${CMMM_GITHUB_REPOSITORY}/-/raw/${CMMM_GIT_TAG}/${CMMM_FILEPATH}")
  elseif(DEFINED CMMM_BITBUCKET_REPOSITORY)
    set(CMMM_URL "https://bitbucket.org/${CMMM_GITHUB_REPOSITORY}/raw/${CMMM_GIT_TAG}/${CMMM_FILEPATH}")
  endif()

endfunction()
